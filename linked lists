~~~Q)TRAVERSING FUNCTION?
#include<stdio.h>
#include<stdlib.h>//used for malloc 
struct node
{
    int data;
    struct node*link;
};
int main()
{
    struct node *head;
    head=malloc(sizeof(struct node));
    head->data=45;
    head->link=NULL;
    struct node *current;
    current=malloc(sizeof(struct node));
    current->data=98;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=68;
    current->link=NULL;
    head->link->link=current;
    //traversing
    struct node*tmp;
    tmp =head;
    while(tmp!=NULL)
    {
        printf("%d->",tmp->data);
        tmp=tmp->link;
    }
    return 0;
}
OUTPUT:
45->98->68


Q)
WRITE A PROGRAM COUNT OF NODES IN LINKED LIST?
A)#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
void countofnodes(struct node*head);
int main()
{
    struct node*head;
    head=malloc(sizeof(struct node));
    head->data=45;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=34;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=46;
    current->link=NULL;
    head->link->link=current;
    countofnodes(head);
}
void countofnodes(struct node*head)
{
    int count=0;
    if(head==NULL)
    {
       printf("linked list is empty");
    }
        struct node*ptr;
        ptr=NULL;
        ptr=head;
        while(ptr!=NULL)
        {
            count++;
            ptr=ptr->link;
        }
        printf("%d",count);
        
    }
OUTPUT:
no.of nodes in linked list is 3

Q)
WRITE A PROGRAM ADDING A NODE TO BEGINING OF THE LINKED LIST?
A)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
void addnodebeg(struct node*head,int d);
int main()
{
    struct node*head;
    head=malloc(sizeof(struct node));
    head->data=45;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=55;
    current->link=NULL;
    head->link=current;
    int data;
    
    addnodebeg(head,data);
}
void addnodebeg(struct node*head,int d)
{
    
struct node*new;
new=malloc(sizeof(struct node));
new->data=65;
new->link=NULL;
new->link=head;
head=new;
struct node*tmp;
tmp=head;
while(tmp!=NULL)
{
    printf("%d->",tmp->data);
    tmp=tmp->link;
}
}
OUTPUT:
65->45->55

Q)
WRITE A PROGRAM INSERT A NODE END OF THE LIST?
A)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
void endtonode(struct node*head,int d);
void printlist(struct node*head);
int main()
{
    struct node*head;
    head=malloc(sizeof(struct node));
    head->data=39;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=14;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=25;
    current->link=NULL;
    head->link->link=current;
    current=malloc(sizeof(struct node));
    current->data=35;
    current->link=NULL;
    head->link->link->link=current;
    int data=65;
    endtonode(head,data);
    printlist(head);
}
void endtonode(struct node*head,int d)
{
    struct node*new,*ptr;
//struct node*new;
ptr=head;
new=(struct node*)malloc(sizeof(struct node));
new->data=d;
new->link=NULL;
//trversing start;
//struct node*tmp;
//tmp=head;
while(ptr->link!=NULL)
{
//printf("%d\t",ptr->data);
    ptr=ptr->link;
    //ptr->link=new;
}
ptr->link=new;
}
void printlist(struct node*head)
{
    struct node *tmp;
    tmp=head;
    while(tmp!=NULL)
    {
        printf("%d\t",tmp->data);
        tmp=tmp->link;
    }
}
OUTPUT:
39	14	25	35	65	

Q)
WRITE A PROGRAM DELETE A BEGINING NODE AT THE LINKED LIST?
A)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
void delfirstnode(struct node*head);
int main()
{
    struct node*head;
    head=malloc(sizeof(struct node));
    head->data=25;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=35;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=45;
    current->link=NULL;
    head->link->link=current;
    current=malloc(sizeof(struct node));
    current->data=55;
    current->link=NULL;
    head->link->link->link=current;
    
   delfirstnode(head);
}
void delfirstnode(struct node*head)
{
    if(head==NULL)
    {
        printf("list is empty");
    }
    else
    {
        struct node*tmp;
        tmp=head;
        head=head->link;
        free(tmp);
        tmp=NULL;
    }
    //traversing
    struct node*ptr;
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d\t",ptr->data);
        ptr=ptr->link;
        
    }
}
OUTPUT:
35	45	55	

Q)
WRITE A PROGRAM DELETE A ENDING NODE AT THE LINKED LIST?
A)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
struct node *delnodeend(struct node*head);
int main()
{
    struct node*head;
    head=malloc(sizeof(struct node));
    head->data=15;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=25;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=35;
    current->link=NULL;
    head->link->link=current;
    current=malloc(sizeof(struct node));
    current->data=45;
    current->link=NULL;
    head->link->link->link=current;
    delnodeend(head);
}
 struct node* delnodeend(struct node*head)
{
    if(head==NULL)
    {
        printf("list is empty");
    }
    else if(head->link==NULL)
    {
        free(head);
        head=NULL;
    }
    else
    {
        struct node *tmp,*tmp2;
        tmp=head;
        tmp2=head;
        while(tmp->link!=NULL)
        {
            tmp2=tmp;
            tmp=tmp->link;
        }
        tmp2->link=NULL;
        free(tmp);
        tmp=NULL;
        
    }
struct node*ptr;
ptr=head;
while(ptr!=NULL)
{
    printf("%d ",ptr->data);
    ptr=ptr->link;
}
}
OUTPUT:
15 25 35 



Q)WRITE A PROGRAM INSERT A NODE BETWEEN LINKED LIST?
A)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
struct node*insertnode(struct node*head,int data);
int main()
{
    struct node*head;
    head=malloc(sizeof(struct node));
    head->data=15;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=25;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=35;
    current->link=NULL;
    head->link->link=current;
    current=malloc(sizeof(struct node));
    current->data=45;
    current->link=NULL;
    head->link->link->link=current;
    int d=40;;
    insertnode(head,d);
}
struct node*insertnode(struct node*head,int data)
{
    struct node*new,*p,*prev;
    new=malloc(sizeof(struct node));
    new->data=data;
    new->link=NULL;
    if (head==NULL)
    {
        head=new;
        return 0;
    }
    p=head;
    while(data > p->data)
    {
        prev=p;
        p=p->link;
    }
    prev->link=new;
    new->link=p;
struct node*tmp;
tmp=head;
while(tmp!=NULL)
{
    printf("%d\t",tmp->data);
    tmp=tmp->link;
}
}

OUTPUT:
15	25	35	40	45	

Q)
WRITE A PROGRAM DELETE A NODE BETWEEN LINKED LIST?
A)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*link;
};
struct node*deltonode(struct node **head,int data);
struct node*printlist(struct node*head);
int main()
{
    struct node*head=NULL;
    head=malloc(sizeof(struct node));
    head->data=15;
    head->link=NULL;
    struct node*current;
    current=malloc(sizeof(struct node));
    current->data=25;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data=35;
    current->link=NULL;
    head->link->link=current;
    current=malloc(sizeof(struct node));
    current->data=45;
    current->link=NULL;
    head->link->link->link=current;
    int d=25;
    deltonode(&head,d);
    printlist(head);
    return 0;
}
struct node*deltonode(struct node **head,int data)
//why double pointer is used?
//ANS:head is changed if 1st node is deleted
{
struct node *prev,*p;
//p=*head;
//prev=NULL;
if (*head==NULL)
{
    printf("list is empty");
    return 0;
}
p=*head;
prev=NULL;
//deleting 1st node
if(p->data==data)
{
    *head=p->link;
    free(p);
    p=NULL;
}
//deleting other nodes
while(p!=NULL && p->data != data)
{
    prev=p;
    p=p->link;
}
if (p == NULL) {
        printf("Node with data %d not found\n", data);
        return 0;
    }
prev->link=p->link;
free(p);
p=NULL;
}
struct node*printlist(struct node*head)
{
struct node*tmp;
tmp=head;
while(tmp!=NULL)
{
    printf("%d\t",tmp->data);
    tmp=tmp->link;
}
}

OUTPUT:
15	35	45
